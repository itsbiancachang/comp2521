
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "textbuffer.h"

typedef struct textbufferNode {

    char *word;
    struct textbufferNode *next;
    
} textbufferNode;

typedef struct textbufferNode *NodeP;

struct textbuffer {

    int nitems; 
    struct textbufferNode *first;
    struct textbufferNode *last;
        
} textbuffer;




NodeP createNewTBNode();
TB createNewTB();


/**
 * Allocate a new textbuffer whose contents is initialised with the text
 * in the given string.
 */
 
 

TB newTB (char* text) {
    
    TB newTBList = createNewTB();
    
    NodeP current = NULL;

    // Split text buffer by '\n'
    //specifically define the size of the array so we can use the strtok function
    char thing[strlen(text)];
    strcpy(thing, text);
    
    // Split line by newline
    char *line = strtok(thing, "\n");
    
    while (line != NULL) {
        // Create new node
        NodeP newNode = createNewTBNode(line);

        // If it's the first node (head of the text buffer)
        if (newTBList->first == NULL) {
            
            newTBList->first = newTBList->last = current = newNode; 
        } else {
            
            newTBList->last->next = newNode;
            newTBList->last = newNode; 
        }
        
        line = strtok(NULL, "\n");
        newTBList->nitems++;
    }
    
    return newTBList;
}


NodeP createNewTBNode(char* splited_text)
{
    NodeP node = malloc(sizeof(*node));
    
    node->word = calloc (1, sizeof(char)*strlen(splited_text) + 2);
    // copy word in text buffer into linked list node
    strcpy(node->word, splited_text);
    node->next = NULL;
    return node; 
}


TB createNewTB()
{
    TB newTB = malloc(sizeof(*newTB));

    newTB->nitems = 0; 
    newTB->first = NULL;
    newTB->last = NULL;
    
    return newTB; 
}



/**
 * Free  the  memory occupied by the given textbuffer. It is an error to
 * access the buffer afterwards.
 */
void releaseTB (TB tb) {
    
    NodeP temp = tb->first; 
    NodeP node_to_free = NULL;
    
    if(temp == NULL) return; 
    
    while(temp != NULL) {
        node_to_free = temp;
        temp = temp->next; 
        
        //word is a string so it is necessary to free it 
        free(node_to_free->word);
        //then free the whole struct 
        free(node_to_free);
    }
    
    free(tb);
}

/**
 * Allocate  and return a string containing all of the text in the given
 * textbuffer. If showLineNumbers is true, add a prefix corresponding to
 * the line number.
 */
 
char *dumpTB (TB tb, bool showLineNumbers) {
	
	
	//handling empty tb
	if (tb->first == NULL) return NULL;
	else {
	    //lines to return 
	    //malloc the size of the lines 
	    NodeP temp = tb->first; 
	    int total_len = 0;
	    
	    while (temp != NULL) {
	        
	        total_len += (strlen(temp->word) + 7);
	        temp = temp->next; 
	    }
	    
	    char *all_lines = calloc(1, sizeof(char)*total_len);
	    
	    //set it back to default 
	    temp = tb->first; 
	   
	    char count[4]; 
	    
	    int num = 1; 
	    if (showLineNumbers == true) {
	        
	        while (temp != NULL) {   
	            
	            sprintf(count, "%d. ", num);
	            strcat(all_lines, count);
	            strcat(all_lines, temp->word);
	            strcat(all_lines, "\n");
	            
	            temp = temp->next; 
	            num++;
	        }
	        
	    } else {
	        
	        while (temp != NULL) {
	            
	            strcat(all_lines, temp->word);
	            strcat(all_lines, "\n");
	            
	            temp = temp->next;
	        }
	    }	
	
	   
	    return all_lines;
	
	}
	
	

}

/**
 * Return the number of lines of the given textbuffer.
 */
int linesTB (TB tb) {
	
	if(tb == NULL) return 0;
	else return tb->nitems; 
}

/**
 * Add a given prefix to all lines between 'from' and 'to', inclusive.
 * - The  program  should abort() wih an error message if 'from' or 'to'
 *   is out of range. The first line of a textbuffer is at position 1.
 */
void addPrefixTB (TB tb, int from, int to, char *prefix) {
   
    //handling cases if prefix is NULL, or to < from 
    if ((prefix == NULL) || (to < from) || (to > tb->nitems) || (from < 1)) {
        abort();
    } else {
              
        NodeP temp = tb->first;
        //get the "from" node
        for (int i = 1; i < from; i++) {
      
            temp = temp->next; 
        }
        
        
        for (int j = from; j <= to; j++) {
            //char *old_node_to_free = NULL; 
            //create new word memory
            char *newWord = calloc(1, sizeof(char)*strlen(temp->word) + sizeof(char)*strlen(prefix) + 1);
            
            strcat(newWord, prefix);
            strcat(newWord, temp->word);
            
            free(temp->word);
            temp->word = newWord;
            temp = temp->next;   
        }
        
   }
        
}
    



/**
 * Merge 'tb2' into 'tb1' at line 'pos'.
 * - After this operation:
 *   - What was at line 1 of 'tb2' will now be at line 'pos' of 'tb1'.
 *   - Line  'pos' of 'tb1' will moved to line ('pos' + linesTB('tb2')),
 *     after the merged-in lines from 'tb2'.
 *   - 'tb2' can't be used anymore (as if we had used releaseTB() on it)
 * - The program should abort() with an error message if 'pos' is out of
 *   range.
 */
 
 //similiar to insert something into the linked list
void mergeTB (TB tb1, int pos, TB tb2) {
    
   
    if ((pos < 1) || (pos > tb1->nitems + 1)) {
       
        abort();  
    } else if ((tb1 == tb2) && (pos == 1)) {
        //ignore   
    } else if ((tb1->first == NULL && tb2->first != NULL)) {
        
        tb1->first = tb2->first;
        tb1->last = tb2->last; 
        
        free(tb2);
    
    } else if ((tb1->first != NULL && tb2->first == NULL)) {
        
        free(tb2);
        
    } else {   
        //insert tb2 before the start of tb1 
        
        tb1->nitems += tb2->nitems; 
        
        //Insert tb2 before the start of tb1
        if (pos == 1) {
             
            tb2->last->next = tb1->first; 
            tb1->first = tb2->first;
            //tb1's last remains the same 
        } else if(pos == (linesTB(tb1) + 1)) {
        //Append tb2 to the end of tb1
        
            tb1->last->next = tb2->first; 
            tb1->last = tb2->last; 
        } else {
            
            NodeP temp1 = tb1->first;
            
            NodeP splited_temp1_next = NULL;
            
            for (int i = 1; i < pos - 1; i++) {
                temp1 = temp1->next;  
            }
        
            splited_temp1_next = temp1->next; 
            temp1->next = tb2->first;
            tb2->last->next = splited_temp1_next;  
        }
        
        //free tb2's struct;
        free(tb2); 
    }   
}

/**
 * Copy 'tb2' into 'tb1' at line 'pos'.
 * - After this operation:
 *   - What was at line 1 of 'tb2' will now be at line 'pos' of 'tb1'.
 *   - Line  'pos' of 'tb1' will moved to line ('pos' + linesTB('tb2')),
 *     after the pasted-in lines from 'tb2'.
 *   - 'tb2' is unmodified and remains usable independent of tb1.
 * - The program should abort() with an error message if 'pos' is out of
 *   range.
 */
void pasteTB (TB tb1, int pos, TB tb2) {
    
   
    if (pos < 1 || (pos > tb1->nitems + 1)) {
        
        abort();
    }
    else if((tb1 == tb2) && (pos == 1)) {
        //ignore   
    } else {
   
        //create a copied version of tb2
        NodeP temp2 = tb2->first; 
        TB copied_tb2 = createNewTB();
        
        while (temp2 != NULL) {
           
            NodeP newNode = createNewTBNode(temp2->word);
            
            if (copied_tb2->first == NULL) {
                copied_tb2->first = copied_tb2->last = newNode; 
            } else {   
                
                copied_tb2->last->next = newNode;
                copied_tb2->last = newNode;  
            }
            
            temp2 = temp2->next; 
        }
        
        copied_tb2->nitems = tb2->nitems; 
        
        /*
        NodeP temptest = copied_tb2->first;
        while(temptest != NULL)
        {
            printf("%s", temptest->word);
            temptest = temptest->next; 
        }
        */
        
        //handling cases 
        //Insert copied_tb2 before the start of tb1
        if (pos == 1) {
            
            copied_tb2->last->next = tb1->first; 
            tb1->first = copied_tb2->first;  
        } else if(pos == (linesTB(tb1) + 1)) {
        //Append tb2 to the end of tb1
            tb1->last->next = copied_tb2->first; 
            tb1->last = copied_tb2->last; 
        } else {
            //inserting linked list tb2 to tb1
            NodeP temp1 = tb1->first;

            //the node after that line at tb1
            NodeP next_n = NULL;

            //get the pos line's node at tb1
            for (int i = 1; i < pos - 1; i++) {
	            
	            temp1 = temp1->next; 
            }
            
            next_n = temp1->next; 
            
            temp1->next = copied_tb2->first;
            copied_tb2->last->next = next_n;
            
            tb1->nitems += copied_tb2->nitems; 
            
        }
        
        free(copied_tb2);
            
    }
        
    
     
}

/**
 * Cut  the lines between and including 'from' and 'to' out of the given
 * textbuffer 'tb' into a new textbuffer.
 * - The result is a new textbuffer (much as one created with newTB()).
 * - The cut lines will be deleted from 'tb'.
 * - The  program should abort() with an error message if 'from' or 'to'
 *   is out of range.
 */
TB cutTB (TB tb, int from, int to) {
	
	
    if (from > to || from < 1 || from > tb->nitems || to > tb->nitems) { 
        abort();
    } else {
        
        TB cut = createNewTB(); 
	
	    int n = to - from + 1;
	    tb->nitems -= n; 
	    NodeP temp = tb->first; 
	    
    
        //handling -- from == 1
        if (from == 1) {
           
            NodeP next_n = NULL;
            cut->first = tb->first; 
            
            //get the node from tb -- location of to
            for (int j = 1; j <= to - 1; j++) {
	            temp = temp->next; 
            }
            
            next_n = temp->next; 
            tb->first = next_n; 
            
            cut->last = temp; 
            cut->last->next = NULL;
            
            
            cut->nitems = to - from + 1;
        }
        else {
            
            NodeP prev_n = NULL;
            NodeP to_n = NULL;
            NodeP next_n = NULL; 
            
            
            //get the node from tb -- location of from 
            for (int i = 1; i <= from - 1; i++) {
	            
	            prev_n = temp; 
	            temp = temp->next; 
            }
           
            
            cut->first = temp; 
            
            
            //set temp back to default 
            temp = tb->first; 
            
            //get the node from tb -- location of to
            for (int j = 1; j <= to - 1; j++) {
	            
	            temp = temp->next; 
            }

            
            //get the node next to the "to" line - then link the node befre from_n
            next_n = temp->next; 
            
            to_n = temp; 
            to_n->next = NULL;
            
            cut->last = to_n; 
            cut->nitems = to - from + 1; 


            //link the node before from --- to the node after to
            prev_n->next = next_n;

         }
         
         
         return cut;
         
     }
     
    
}

/**
 * Return  a  linked list of match nodes containing the positions of all
 * of the matches of string 'search' in 'tb'.
 * - The textbuffer 'tb' should remain unmodified.
 * - The user is responsible for freeing the returned list.
 */
Match searchTB (TB tb, char *search) {
    
    NodeP temp = tb->first; 
    
    //searh - empty strong
    
    if (search == NULL) {
    
        abort();
        
    } else {  
    
        int pos = 0; 
        int count = 0; 
        Match prev = NULL;
        Match head = NULL;
        
        //iterate thru TB node 
        
        for (int i = 1; i <= tb->nitems; i++) {
            
            char *ptr = strstr(temp->word, search);
             
            //first Match node     
            if (ptr != NULL && count == 0) {
                
                Match newMatchNode = malloc(sizeof(*newMatchNode));
                
                
                head = newMatchNode; 
                prev = newMatchNode; 
                newMatchNode->lineNumber = i;  
                pos = ptr - temp->word + 1;
                newMatchNode->columnNumber = pos; 
                newMatchNode->next = NULL;
                
                count = 1; 
                
            } else if (ptr != NULL) {
                
                Match newMatchNode = malloc(sizeof(*newMatchNode));
                 
                prev->next = newMatchNode; 
                    
                prev = newMatchNode; 
                newMatchNode->lineNumber = i; 
                pos = ptr - temp->word + 1;
                newMatchNode->columnNumber = pos; 
                newMatchNode->next = NULL;
              
            }
            
            temp = temp->next; 
         }

        
	    return head;
	 }
}

/**
 * Remove  the  lines between 'from' and 'to' (inclusive) from the given
 * textbuffer 'tb'.
 * - The  program should abort() with an error message if 'from' or 'to'
 *   is out of range.
 */
void deleteTB (TB tb, int from, int to) {

    
    if (to < from || from < 1 || from > tb->nitems || to > tb->nitems) {
        abort();
    } else {
        
        NodeP temp = tb->first; 
        TB cut = createNewTB();
        
        int num_to_delete = to - from + 1; 
        tb->nitems = tb->nitems - num_to_delete; 
        
        if (from == 1) {
            
            NodeP next_n = NULL;
            cut->first = tb->first; 
            
            //get the node from tb -- location of to
            for (int j = 1; j <= to - 1; j++) {
	            temp = temp->next; 
            }
            
            next_n = temp->next; 
            tb->first = next_n; 
            
            cut->last = temp; 
            cut->last->next = NULL;
            
            
            cut->nitems = to - from + 1;
            
        }  else {   
            
            NodeP prev_n = NULL;
            NodeP to_n = NULL;
            NodeP next_n = NULL; 
            
            
            //get the node from tb -- location of from 
            for (int i = 1; i <= from - 1; i++) {
	            
	            prev_n = temp; 
	            temp = temp->next; 
            }
          
            cut->first = temp; 
            
            
            //set temp back to default 
            temp = tb->first; 
            
            //get the node from tb -- location of to
            for (int j = 1; j <= to - 1; j++) {
	            temp = temp->next; 
            }

            
            //get the node next to the "to" line - then link the node befre from_n
            next_n = temp->next; 
            
            to_n = temp; 
            to_n->next = NULL;
            
            cut->last = to_n; 
            cut->nitems = to - from + 1; 


            //link the node before from --- to the node after to
            prev_n->next = next_n;
            
       }
           
           //iterate thru cut and free each node_to_free
           NodeP temp_c = cut->first;
           NodeP node_to_free = NULL;
           while (temp_c != NULL) {
                
                node_to_free = temp_c; 
                temp_c = temp_c->next;
                
                free(node_to_free->word);
                free(node_to_free);
           }
           
           free(cut);
        
    }
    
    
    

    

}

/**
 * Search  every  line of the given textbuffer for every occurrence of a
 * set of specified substitutions and alter them accordingly.
 * - Refer to the spec for details.
 */
 
 
 
void formRichText(TB tb)
{
    

    if (tb->first == NULL) {
    
        return;
        
    } else {
        
        NodeP temp = tb->first;
        char *str = temp->word;
        int i = 0;
        int j, k;
        char spe_c;
        char *sub;
        
        char *bef_s = NULL;
        char *mid_s = NULL;
        char *aft_s = NULL;
        
        //loop thru every node
        while (temp != NULL) {
            
            //loop thru each char
            for (i = 0; str[i] != '\0'; i++) {
                 //find the first special char 
                 if (str[i] == '*' || str[i] == '_') {
                 
                     //store the special char we found 
                     spe_c = str[i];
                    
                    
                     //keep scanning: find the second special char 
                     for (j = i + 1; str[j] != '\0'; j++) {
                         //only valid if two special char are not next to each other
                         if (str[j] == spe_c && j != i+1) {   
                             //store the position
                             k = j + 1;
                            
                             //substring before the special char 
                             if (i > 0) {
                                 
                                 bef_s = calloc(1, sizeof(char)*(i-1+1));
                                 strncpy(bef_s, str, i);
                             }   
                            
                             if (j > i + 1) {
                             
                                 mid_s = calloc(1, sizeof(char)*((j-1)-(i+1)+1));
                                 strncpy(mid_s, str + i + 1, j-i-1);
                             }
                            
                             if (str[j+1] != '\0') {
                                 aft_s = calloc(1, sizeof(char)*((strlen(str)-2)-(j+1)+1));
                                 strncpy(aft_s, str + j + 1, strlen(str)-2-j+1);
                             }
                            
                             temp->word = calloc(strlen(str) + 7, sizeof(char));
                            
                             if (bef_s != NULL) strcat(temp->word, bef_s);
                            
                             if (spe_c == '*') strcat(temp->word, "<b>");
                             else if (spe_c == '_') strcat(temp->word, "<i>");
                            
                             if (mid_s != NULL) strcat(temp->word, mid_s);
                            
                             if (spe_c == '*') strcat(temp->word, "</b>");
                             else if (spe_c == '_') strcat(temp->word, "</i>");
                            
                             if(aft_s != NULL) strcat(temp->word, aft_s);
                             
                            
                             free(bef_s);
                             bef_s = NULL;
                            
                             free(mid_s);
                             mid_s = NULL;
                            
                             free(aft_s);
                             aft_s = NULL;
                            
                             
                             free(str);
                             str = temp->word;
                            
                            
                             //jump 
                             i = k + 4;
                            
                             //no need to keep scanning
                             //jump out of the j loop
                             break; 
                        
                        } else if (j == i+1 && str[j] == spe_c) {
                            //two special char being next to each other 
                            //do nothing
                            //jump out of the loop
                            break;
                        }
                        
                    }
                } else if (str[0] == '#' && strlen(str) > 1) {
                
                //store everything after #
                  sub = calloc(1, sizeof(char)*(strlen(str)-1));
                  strncpy(sub, str + 1, strlen(str) - 1);
                  free(temp->word);
                  temp->word = calloc(strlen(str) + 9, sizeof(char));
                  strcat(temp->word, "<h1>");
                  strcat(temp->word, sub);
                  strcat(temp->word, "</h1>");  
                  free(sub); 
                  
                  break;
                } 
              }
              
              temp = temp->next; 
              if(temp != NULL) str = temp->word;
          }
          
      }
}
   
              


////////////////////////////////////////////////////////////////////////
// Bonus challenges

char *diffTB (TB tb1, TB tb2) {
	return NULL;
}

void undoTB (TB tb) {

}

void redoTB (TB tb) {

}
